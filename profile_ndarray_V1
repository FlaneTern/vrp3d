Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    55                                               @profile
    56                                               def is_insert_feasible(self, position:np.ndarray, item:Item) -> bool:
    57                                                   # is_overflow = position[0] + item.size[0] > self.size[0] or \
    58                                                   #     position[1] + item.size[1] > self.size[1] or \
    59                                                   #     position[2] + item.size[2] > self.size[2]
    60     85985     250188.6      2.9      1.9          is_overflow = position + item.size > self.size
    61     85985     700434.4      8.1      5.4          is_overflow = np.any(is_overflow)
    62     75981      17540.3      0.2      0.1          if is_overflow:
    63     75981      16497.5      0.2      0.1              return False
    64
    65     10004    5455100.7    545.3     42.0          if is_overlap_any_packed_items(position, item.size, self.packed_items):
    66                                                       return False
    67                                                   # for p_item in self.packed_items:
    68                                                   #     if is_overlapping_3d(position, item.size, p_item.position, p_item.size):
    69                                                   #         return False
    70
    71     10004      14146.0      1.4      0.1          is_item_at_bottom = position[2] == 0
    72      9967       4267.8      0.4      0.0          if is_item_at_bottom:
    73        37          9.3      0.3      0.0              return True
    74      9967       3516.0      0.4      0.0          total_supported_area = 0
    75
    76   1936479     491931.3      0.3      3.8          for p_item in self.packed_items:
    77   1936479    1757270.6      0.9     13.5              total_supported_area += compute_supported_area(position,
    78   1936479    1898440.0      1.0     14.6                                                             item.size,
    79   1936479     556243.3      0.3      4.3                                                             p_item.position,
    80   1936479    1794026.2      0.9     13.8                                                             p_item.size)
    81
    82      9967      29160.5      2.9      0.2          supported_ratio = total_supported_area/item.face_area
    83      9967       5818.5      0.6      0.0          return supported_ratio >= self.support_alpha

Total time: 18.979 s
File: C:\Users\USER\python\digihatch\vrp3d\.\packing\packing.py
Function: add_items_to_box at line 202

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   202                                           @profile
   203                                           def add_items_to_box(box:Box, item_list:List[Item])->Tuple[bool, Dict[str, Tuple[int,int,int]]]:
   204                                               # duplicate items for each rotation
   205       120         48.3      0.4      0.0      dup_items: List[Item] = []
   206       774        270.7      0.3      0.0      for i, item in enumerate(item_list):
   207       774        358.1      0.5      0.0          item_list[i].rotate_count = 0
   208      3870       1281.2      0.3      0.0          for r in range(1,6):
   209      3870     654338.3    169.1      3.4              new_item = deepcopy(item)
   210      3870       1213.1      0.3      0.0              new_item.rotate_count = r
   211      3870       1408.6      0.4      0.0              dup_items += [new_item]
   212       120         54.7      0.5      0.0      item_list += dup_items
   213       120     152297.6   1269.1      0.8      item_list = sorted(item_list, key=cmp_to_key(cmp_item_ah))
   214       120         40.1      0.3      0.0      packed_item_list = []
   215       120         40.4      0.3      0.0      position_dict = {}
   216
   217       120         31.9      0.3      0.0      unpacked_items = []
   218      1299        694.1      0.5      0.0      while len(item_list) > 0:
   219      1299        378.3      0.3      0.0          item = item_list[0]
   220      1299   16362735.8  12596.4     86.2          box_i, ep_i = find_first_ep([box], item)
   221       669        320.4      0.5      0.0          if ep_i == -1:
   222       630        358.8      0.6      0.0              unpacked_items += [item]
   223       630        309.8      0.5      0.0              del item_list[0]
   224       630        144.6      0.2      0.0              continue
   225
   226                                                   # succeeding in inserting
   227       669    1696671.6   2536.1      8.9          box.insert(ep_i, item)
   228       669        444.9      0.7      0.0          packed_item_list += [item]
   229       669       3782.8      5.7      0.0          position_dict[item.id] = item.position
   230                                                   # remove the duplicate items, in unpacked items
   231      1790        796.4      0.4      0.0          for i in reversed(range(len(unpacked_items))):
   232      1790       8644.2      4.8      0.0              if unpacked_items[i].id == item.id:
   233                                                           del unpacked_items[i]
   234
   235     21370       6614.4      0.3      0.0          for i in reversed(range(len(item_list))):
   236     17356      83770.8      4.8      0.4              if item_list[i].id == item.id:
   237      4014       1847.8      0.5      0.0                  del item_list[i]
   238
   239        70         27.5      0.4      0.0      if len(unpacked_items)>0:
   240        70         18.8      0.3      0.0          return False, None
   241
   242        50         16.5      0.3      0.0      return True, position_dict

Total time: 19.3326 s
File: C:\Users\USER\python\digihatch\vrp3d\.\vns\greedy_init.py
Function: greedy_initialization at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @profile
    28                                           def greedy_initialization(problem: VRP3D) -> Solution:
    29         1         31.1     31.1      0.0      solution = Solution(problem.num_vehicle, problem.num_order)
    30         1          0.6      0.6      0.0      order_list = problem.order_list
    31         1          0.4      0.4      0.0      vehicle_list = problem.vehicle_list
    32         1          0.3      0.3      0.0      dist_mat = problem.distance_matrix
    33        50         34.2      0.7      0.0      for i, order in enumerate(order_list):
    34        50       7100.1    142.0      0.0          print(i)
    35        50         49.0      1.0      0.0          node_idx = i+1
    36        50        111.9      2.2      0.0          action_list: List[InsertionAction] = []
    37       500        256.6      0.5      0.0          for j in range(problem.num_vehicle):
    38       500        127.1      0.3      0.0              add_dist_cost = 0
    39       410        187.1      0.5      0.0              if len(solution.tour_list[j])==0:
    40       410         97.0      0.2      0.0                  prev_node_idx = 0
    41                                                       else:
    42        90         49.1      0.5      0.0                  prev_node_idx = solution.tour_list[j][-1] + 1
    43       500        718.4      1.4      0.0              add_dist = dist_mat[prev_node_idx, node_idx] + dist_mat[node_idx,0] - dist_mat[prev_node_idx,0]
    44       500        444.2      0.9      0.0              add_dist_cost = add_dist*vehicle_list[j].cost_per_km
    45       500        231.9      0.5      0.0              add_weight_cost = order.weight*vehicle_list[j].cost_per_kg
    46       500        180.2      0.4      0.0              add_cost = add_dist_cost + add_weight_cost
    47       500        890.4      1.8      0.0              action_list += [InsertionAction(i,j,add_cost)]
    48        50        447.2      8.9      0.0          action_list = sorted(action_list, key=lambda action: action.cost)
    49
    50                                                   # check feasibility
    51       120         76.1      0.6      0.0          for action in action_list:
    52       120     218811.1   1823.4      1.1              new_sol = deepcopy(solution)
    53       120      74204.4    618.4      0.4              problem.reset(new_sol)
    54       120        919.2      7.7      0.0              arrival_time_to_order, is_fit_duration = get_new_arrival_time(action.order_i, action.vec_i, problem, solution.tour_list[action.vec_i], solution.arrival_time_list[action.vec_i])
    55       120         41.7      0.3      0.0              if not is_fit_duration:
    56                                                           continue
    57       120   19023666.7 158530.6     98.4              is_insertion_feasible, position_dict = append_order(action.order_i, action.vec_i, problem)
    58        70         19.3      0.3      0.0              if is_insertion_feasible:
    59        50        106.8      2.1      0.0                  new_sol.tour_list[action.vec_i] += [action.order_i]
    60        50         44.8      0.9      0.0                  new_sol.arrival_time_list[action.vec_i] += [arrival_time_to_order]
    61        50         43.2      0.9      0.0                  order = problem.order_list[action.order_i]
    62       429        194.1      0.5      0.0                  for j in range(order.num_item_packed):
    63       429        160.3      0.4      0.0                      item = order.packed_item_list[j]
    64       429       1173.8      2.7      0.0                      item.position = position_dict[item.id]
    65        50        215.7      4.3      0.0                  order_packing_position = [order.packed_item_list[j].position for j in range(order.num_item_packed)]
    66        50         40.3      0.8      0.0                  new_sol.packing_position_list[action.order_i] = order_packing_position
    67        50        428.7      8.6      0.0                  new_sol.ep_list[action.vec_i] = copy(problem.vehicle_list[action.vec_i].box.ep_list)
    68        50       1487.3     29.7      0.0                  solution = new_sol
    69        50         22.4      0.4      0.0                  break
    70         1          0.3      0.3      0.0      return solution